name: Build and Release Hotkeys Plugin

on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  # Add pull request protection
  pull_request:
    branches: [main, master]
    types: [opened, synchronize]

# Minimal default permissions (principle of least privilege)
permissions:
  contents: read

# Add restrictions for parallel runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    # Minimal permissions for build job
    permissions:
      contents: read  # Only for checkout
    strategy:
      matrix:
        platform: [x64, arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Setup .NET
        uses: actions/setup-dotnet@6bd8b7f7774af54e05809fcc5431931b3eb1ddee # v4.0.1
        with:
          dotnet-version: '9.0.x'
      
      - name: Build
        run: dotnet build Hotkeys/Community.PowerToys.Run.Plugin.Hotkeys/Community.PowerToys.Run.Plugin.Hotkeys.csproj -c Release -p:Platform="${{ matrix.platform }}" --self-contained true
      
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "IS_TAG=true" >> $GITHUB_OUTPUT
          else
            echo "VERSION=0.90.1" >> $GITHUB_OUTPUT
            echo "IS_TAG=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Debug Output
        run: |
          Get-ChildItem -Path "Hotkeys" -Recurse -Directory | Where-Object { $_.Name -eq "Release" } | ForEach-Object { Write-Host $_.FullName }
        shell: pwsh
      
      - name: Create output directory
        run: mkdir -p artifacts
      
      - name: Copy build output to artifacts directory
        run: |
          $artifactDir = "artifacts/Definition-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          
          # Create the artifact directory
          New-Item -ItemType Directory -Force -Path $artifactDir
          
          # Create Hotkeys subfolder
          New-Item -ItemType Directory -Force -Path "$artifactDir/Hotkeys"
          
          # Create Images and Shortcuts folders
          New-Item -ItemType Directory -Force -Path "$artifactDir/Hotkeys/Images"
          New-Item -ItemType Directory -Force -Path "$artifactDir/Hotkeys/Shortcuts"
          
          # Copy shortcut files from the project to the build output
          $shortcutsSourceDir = "Hotkeys/Shortcuts"
          if (Test-Path $shortcutsSourceDir) {
            Write-Host "Copying shortcut files from $shortcutsSourceDir"
            
            # Automatically detect and create all subdirectories in the Shortcuts folder
            $subDirs = Get-ChildItem -Path $shortcutsSourceDir -Directory
            Write-Host "Found subdirectories: $($subDirs.Name -join ', ')"
            
            foreach ($subDir in $subDirs) {
              $subDirName = $subDir.Name
              Write-Host "Creating directory: $artifactDir/Hotkeys/Shortcuts/$subDirName"
              New-Item -ItemType Directory -Force -Path "$artifactDir/Hotkeys/Shortcuts/$subDirName"
              
              # Copy all JSON files from this subdirectory
              Write-Host "Copying files from $shortcutsSourceDir/$subDirName to $artifactDir/Hotkeys/Shortcuts/$subDirName"
              Copy-Item -Path "$shortcutsSourceDir/$subDirName/*.json" -Destination "$artifactDir/Hotkeys/Shortcuts/$subDirName/" -Force
            }
            
            # Copy root shortcuts
            Copy-Item -Path "$shortcutsSourceDir/*.json" -Destination "$artifactDir/Hotkeys/Shortcuts/" -Force
            
            Write-Host "Shortcut files copied successfully"
          } else {
            Write-Warning "Shortcuts source directory not found at $shortcutsSourceDir"
          }
          
          # Define the direct path to the build output
          $buildOutput = "Hotkeys/Community.PowerToys.Run.Plugin.Hotkeys/bin/${{ matrix.platform }}/Release"
          
          Write-Host "Using build output directory: $buildOutput"
          
          # Check if the directory exists
          if (-not (Test-Path $buildOutput)) {
            Write-Host "Build output directory not found at expected path. Searching for it..."
            $buildOutput = Get-ChildItem -Path "Hotkeys" -Recurse -Directory | 
                           Where-Object { $_.Name -eq "Release" -and $_.FullName -like "*${{ matrix.platform }}*" } | 
                           Select-Object -First 1 -ExpandProperty FullName
            
            if ($buildOutput) {
              Write-Host "Found build output directory: $buildOutput"
            } else {
              Write-Error "Could not find any Release directory for platform ${{ matrix.platform }}"
              exit 1
            }
          }
          
          # Check if build output exists before proceeding
          if (-not (Test-Path $buildOutput)) {
            Write-Error "Build output directory not found"
            exit 1
          }
          
          # Check for files directly in the build output directory
          $files = Get-ChildItem -Path $buildOutput -File
          if ($files.Count -gt 0) {
            Write-Host "Found $($files.Count) files in build output directory. Copying directly..."
            Copy-Item -Path "$buildOutput/*" -Destination "$artifactDir/Hotkeys" -Recurse -Force
            Write-Host "Files copied successfully"
          } else {
            # Look for a .NET runtime folder
            $runtimeFolder = Get-ChildItem -Path $buildOutput -Directory | Where-Object { $_.Name -like "net*" } | Select-Object -First 1 -ExpandProperty FullName
            
            if ($runtimeFolder) {
              Write-Host "Found runtime folder: $runtimeFolder"
              
              # Copy all files from the runtime folder
              Copy-Item -Path "$runtimeFolder/*" -Destination "$artifactDir/Hotkeys" -Recurse -Force
              
              # Make sure we have all required DLLs
              $requiredDlls = @(
                "System.Reactive.dll",
                "WinRT.Runtime.dll",
                "Microsoft.Windows.SDK.NET.dll"
              )
              
              foreach ($dll in $requiredDlls) {
                if (-not (Test-Path "$artifactDir/Hotkeys/$dll")) {
                  # Try to find the DLL in the build output
                  $dllPath = Get-ChildItem -Path $buildOutput -Recurse -Filter $dll | Select-Object -First 1 -ExpandProperty FullName
                  if ($dllPath) {
                    Copy-Item -Path $dllPath -Destination "$artifactDir/Hotkeys/" -Force
                    Write-Host "Copied required DLL: $dll"
                  } else {
                    Write-Warning "Could not find required DLL: $dll"
                  }
                }
              }
              
              Write-Host "Files copied successfully from runtime folder"
            } else {
              # If no runtime folder, check for any subdirectories
              $subDirs = Get-ChildItem -Path $buildOutput -Directory
              if ($subDirs.Count -gt 0) {
                $firstSubDir = $subDirs[0].FullName
                Write-Host "No runtime folder found, but found subdirectory: $firstSubDir"
                Copy-Item -Path "$firstSubDir/*" -Destination "$artifactDir/Hotkeys" -Recurse -Force
                Write-Host "Files copied from first subdirectory"
              } else {
                Write-Error "No files or subdirectories found in build output directory"
                exit 1
              }
            }
          }
        shell: pwsh
      
      - name: Create ZIP archive
        run: |
          $artifactDir = "artifacts/Definition-v${{ steps.get_version.outputs.VERSION }}-${{ matrix.platform }}"
          
          # Create the zip files with names that match the README.md download links
          if ("${{ matrix.platform }}" -eq "x64") {
            $zipFile = "Hotkeys-x64.zip"
          } else {
            $zipFile = "Hotkeys-arm64.zip"
          }
          
          # Create the zip file
          Compress-Archive -Path "$artifactDir/Hotkeys" -DestinationPath "artifacts/$zipFile"
        shell: pwsh
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@50769540e7f4bd5e21e526ee35c689e35e0d6874 # v4.4.0
        with:
          name: build-artifacts-${{ matrix.platform }}
          path: artifacts/*.zip
          retention-days: 7  # Security: limit exposure time
          if-no-files-found: error  # Fail fast if no files
  
  release:
    needs: build
    runs-on: ubuntu-latest
    # Write permissions only for release job
    permissions:
      contents: write  # Only for creating releases
    if: startsWith(github.ref, 'refs/tags/v')
    # Optional: Use environment for additional security
    # environment: production  # Requires manual approval
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Download all artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: downloaded-artifacts
      
      # Debug step to see what files are available
      - name: List downloaded artifacts
        run: |
          echo "Listing downloaded artifacts directory:"
          ls -la downloaded-artifacts
          echo "Listing x64 artifacts:"
          ls -la downloaded-artifacts/build-artifacts-x64 || echo "No x64 artifacts found"
          echo "Listing ARM64 artifacts:"
          ls -la downloaded-artifacts/build-artifacts-arm64 || echo "No ARM64 artifacts found"
      
      # Copy artifacts to the expected location with the correct names
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-artifacts
          cp downloaded-artifacts/build-artifacts-x64/*.zip release-artifacts/ || echo "Failed to copy x64 artifact"
          cp downloaded-artifacts/build-artifacts-arm64/*.zip release-artifacts/ || echo "Failed to copy ARM64 artifact"
          echo "Listing release artifacts:"
          ls -la release-artifacts
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Prepare Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOL'
          # ⌨️ Hotkeys Plugin v${{ steps.get_version.outputs.VERSION }}
          
          <img src="https://raw.githubusercontent.com/ruslanlap/PowerToysRun-Hotkeys/refs/heads/master/assets/hotkeys.dark.png" alt="Hotkeys Plugin Logo" width="96" height="96">
          <img src="https://github.com/ruslanlap/PowerToysRun-Hotkeys/blob/master/assets/demo-hotkeys.gif?raw=true" alt="Hotkeys Plugin Demo" width="800">
          
          ## ✨ What's New in v${{ steps.get_version.outputs.VERSION }}
          
          ### 🔧 Bug Fixes & Improvements
          - **Enhanced Search Performance** - Optimized fuzzy search algorithms for faster results
          - **Improved Context Menu** - Added more keyboard shortcuts and better navigation
          - **Fixed Theme Switching** - Better icon adaptation between light/dark themes
          
          ### 🏗️ Code Architecture Improvements  
          - **Modular Architecture** - Separated components for better maintainability
          - **New organized structure**:
            - `ShortcutService.cs` - Core shortcut management and loading
            - `SearchService.cs` - Advanced search and filtering functionality  
            - `IconManager.cs` - Theme-aware icon management
            - `FileWatcher.cs` - Live updates for custom shortcuts
            - `JsonLoader.cs` - Robust JSON parsing and validation
            - `TextHelper.cs` - Fuzzy search and text processing utilities
            - `ShortcutModel.cs` - Data models and schema definitions
          - **Improved Error Handling** - Better resilience for invalid shortcut files
          - **Enhanced Caching** - Smarter in-memory caching for better performance
          
          ### 🚀 Key Features
          
          - 🔍 **Instant Search** - Find shortcuts by description, key combination, or app name
          - 🏷️ **Smart Filtering** - Use `/appname` syntax to filter by specific applications
          - 📋 **Quick Copy** - Copy shortcuts or descriptions with keyboard shortcuts
          - 🚀 **Blazing Fast** - In-memory caching and optimized search algorithms
          - 🎨 **Theme Support** - Auto-adapts to light/dark PowerToys themes
          - 🔄 **Live Updates** - Automatically reloads when shortcut files change
          - 🏗️ **Extensible** - Add custom shortcuts via JSON files
          - 📱 **Multi-Platform** - Support for Windows, Mac, and Linux shortcuts
          - ⏱️ **Context Menu** - Rich right-click actions for enhanced workflow
          - 💾 **Fuzzy Search** - Find shortcuts even with typos or partial matches
          
          ## 📥 Installation
          
          1. Download the ZIP file for your platform (x64 or ARM64)
          2. Extract to `%LOCALAPPDATA%\Microsoft\PowerToys\PowerToys Run\Plugins\`
          3. Restart PowerToys
          4. Start using with `Alt+Space` then type `hk <search term>`
          
          ## 🔧 Usage Examples
          
          - `hk copy` - Find all copy-related shortcuts
          - `hk /vscode` - Show only Visual Studio Code shortcuts  
          - `hk list:chrome` - Alternative app filtering syntax
          - `hk apps` - List all available applications
          
          ## 🐛 Found a bug?
          
          If you encounter any issues or have suggestions for improvements, please [open an issue](https://github.com/ruslanlap/PowerToysRun-Hotkeys/issues).
          
          Made with ❤️ by [ruslanlap](https://github.com/ruslanlap)
          EOL
          
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          name: Hotkeys Plugin v${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: |
            release-artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Add security scanning job
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # For CodeQL
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1
        with:
          languages: csharp
      
      - name: Setup .NET
        uses: actions/setup-dotnet@6bd8b7f7774af54e05809fcc5431931b3eb1ddee # v4.0.1
        with:
          dotnet-version: '9.0.x'
      
      - name: Build for analysis
        run: dotnet build Hotkeys/Community.PowerToys.Run.Plugin.Hotkeys/Community.PowerToys.Run.Plugin.Hotkeys.csproj -c Release
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4f3212b61783c3c68e8309a0f18a699764811cda # v3.27.1